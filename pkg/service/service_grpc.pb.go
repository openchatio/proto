// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenchatServiceClient is the client API for OpenchatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenchatServiceClient interface {
	SendEvent(ctx context.Context, in *SendEventRequest, opts ...grpc.CallOption) (*SendEventResponse, error)
}

type openchatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenchatServiceClient(cc grpc.ClientConnInterface) OpenchatServiceClient {
	return &openchatServiceClient{cc}
}

func (c *openchatServiceClient) SendEvent(ctx context.Context, in *SendEventRequest, opts ...grpc.CallOption) (*SendEventResponse, error) {
	out := new(SendEventResponse)
	err := c.cc.Invoke(ctx, "/org.openchat.service.OpenchatService/SendEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenchatServiceServer is the server API for OpenchatService service.
// All implementations should embed UnimplementedOpenchatServiceServer
// for forward compatibility
type OpenchatServiceServer interface {
	SendEvent(context.Context, *SendEventRequest) (*SendEventResponse, error)
}

// UnimplementedOpenchatServiceServer should be embedded to have forward compatible implementations.
type UnimplementedOpenchatServiceServer struct {
}

func (UnimplementedOpenchatServiceServer) SendEvent(context.Context, *SendEventRequest) (*SendEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEvent not implemented")
}

// UnsafeOpenchatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenchatServiceServer will
// result in compilation errors.
type UnsafeOpenchatServiceServer interface {
	mustEmbedUnimplementedOpenchatServiceServer()
}

func RegisterOpenchatServiceServer(s grpc.ServiceRegistrar, srv OpenchatServiceServer) {
	s.RegisterService(&OpenchatService_ServiceDesc, srv)
}

func _OpenchatService_SendEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenchatServiceServer).SendEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/org.openchat.service.OpenchatService/SendEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenchatServiceServer).SendEvent(ctx, req.(*SendEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenchatService_ServiceDesc is the grpc.ServiceDesc for OpenchatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenchatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "org.openchat.service.OpenchatService",
	HandlerType: (*OpenchatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEvent",
			Handler:    _OpenchatService_SendEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
